help(lm)
#---------------------------------------
# disconnect and unload driver when done
dbDisconnect(con)
dbUnloadDriver(drv)
library("RPostgreSQL")
#---------------------------------------
# disconnect and unload driver when done
dbDisconnect(con)
dbUnloadDriver(drv)
setwd("~/anaconda3/envs/notebook/analysis/ignore/children_hospitals")
library(tidyverse)
df <- read.csv("data.csv", header=T, na.strings=c("-","NA"))
summary(df)
# save summary stats in a dataframe so we can refer to them later
dfsum <- data.frame(unclass(summary(df)), check.names = FALSE, stringsAsFactors = FALSE)
write_csv(dfsum,'data_summary.csv')
View(dfsum)
qplot(totalNPR,
data=df,
fill=factor(fy),
bins = 12
)
View(df)
qplot(totalNPR,
data=df,
fill=factor(fy),
bins = 30
)
qplot(margin,
data=df,
fill=factor(fy),
bins = 30
)
qplot(net_income,
data=df,
fill=factor(fy),
bins = 30
)
qplot(compensation_perc,
data=df,
fill=factor(fy),
bins = 30
)
setwd("~/anaconda3/envs/notebook/analysis/ignore/children_hospitals")
library(tidyverse)
options("scipen" = 10)
df <- read.csv("data.csv", header=T, na.strings=c("-","NA"))
summary(df)
# save summary stats in a dataframe so we can refer to them later
dfsum <- data.frame(unclass(summary(df)), check.names = FALSE, stringsAsFactors = FALSE)
write_csv(dfsum,'data_summary.csv')
qplot(totalNPR,
data=df,
fill=factor(fy),
bins = 30
)
qplot(margin,
data=df,
fill=factor(fy),
bins = 30
)
qplot(net_income,
data=df,
fill=factor(fy),
bins = 30
)
qplot(compensation_perc,
data=df,
fill=factor(fy),
bins = 30
)
years <- table(df$fy)
years
df5 <- filter(df$fy != c("2011","2018"))
years5 <- table(df$fy)
years5
years5 <- table(df5$fy)
df5 <- filter(df$fy %in% c("2012","2013","2014","2015","2016","2017"))
years5 <- table(df5$fy)
df5 <- filter(!df$fy %in% c("2011","2018"))
df5 <- filter(!df, fy %in% c("2011","2018"))
df5 <- filter(!df, fy %in% c(2011,2018))
df5 <- filter(df, !fy %in% c(2011,2018))
years5 <- table(df5$fy)
years5
qplot(totalNPR,
data=df5,
fill=factor(fy),
bins = 30
)
qplot(margin,
data=df5,
fill=factor(fy),
bins = 30
)
qplot(net_income,
data=df5,
fill=factor(fy),
bins = 30
)
qplot(compensation_perc,
data=df5,
fill=factor(fy),
bins = 30
)
View(df5)
setwd("~/anaconda3/envs/notebook/form990/results")
library(tidyverse)
setwd("~/anaconda3/envs/notebook/form990/results")
library(tidyverse)
mhm <- read_csv("ILhospitalsCBI_2016mhm.csv")
cbi <- read_csv("ILhospitalsCBI_CBI.csv")
dfout <- merge(x = mhm, y = cbi, by.x="Provider ID", by.y="medicare_provider_number", all=TRUE)
head(dfout)
View(dfout)
cbi <- read_csv("ILhospitalsCBI_CBI.csv")
dfout <- merge(x = mhm, y = cbi, by.x="Provider ID", by.y="medicare_provider_number", all=TRUE)
head(dfout)
View(dfout)
write_csv(dfout,'CBI_mhm_IL.csv')
setwd("~/anaconda3/envs/notebook/form990/results")
library(tidyverse)
mhm <- read_csv("ILhospitalsCBI_2016mhm.csv")
cbi <- read_csv("ILhospitalsCBI_CBI.csv")
View(mhm)
View(cbi)
dfout <- merge(x = mhm, y = cbi, by.x="Provider ID", by.y="medicare_provider_number", all=TRUE)
View(dfout)
setwd("~/anaconda3/envs/notebook/crainshack/data/teachers")
library("tidyverse")
teachers <- read_csv("teachers.csv")
View(teachers)
# get the summary statistics
summary(teachers)
# we can save these to refer to the later. This code puts the summary stats into a dataframe
# and then saves it as a csv file we can open in excel if we want
dfsum <- data.frame(unclass(summary(teachers)), check.names = FALSE, stringsAsFactors = FALSE)
write_csv(dfsum,'teachers_summary.csv')
# learn more about the data types
sapply(teachers, class)
# select only a few columns
df <- select(teachers,'last_name','first_name','salary')
df
# Select columns with distinct names of schools
df <- teachers %>% distinct(school)
df
# distinct schools and salaries
df <- teachers %>% distinct( school,salary )
df
# this is does not equal
df <- select(teachers,'school') %>% filter(school != "F.D. Roosevelt HS")
df
# hire date is before
df <- select(teachers,'last_name','school','hire_date') %>% filter(hire_date < "2000-01-01")
df
setwd("~/anaconda3/envs/notebook/form990/results")
setwd("~/anaconda3/envs/notebook/form990/results")
library(tidyverse)
mhm <- read_csv("ILhospitalsCBI_2016mhm.csv")
cbi <- read_csv("ILhospitalsCBI_CBI.csv")
View(cbi)
View(mhm)
dfout <- merge(x = mhm, y = cbi, by.x="Provider ID", by.y="medicare_provider_number", all=TRUE)
View(dfout)
head(dfout)
setwd("~/anaconda3/envs/notebook/crainshack/data/teachers")
setwd("~/anaconda3/envs/notebook/crainshack/data/teachers")
teachers <- read_csv("teachers.csv")
View(teachers)
View(teachers)
# get the summary statistics
summary(teachers)
# select only a few columns
df <- select(teachers,'last_name','first_name','salary')
# learn more about the data types
sapply(teachers, class)
# select only a few columns
df <- select(teachers,'last_name','first_name','salary')
df
# Select columns with distinct names of schools
df <- teachers %>% distinct(school)
df
# distinct schools and salaries
df <- teachers %>% distinct( school,salary )
df
View(teachers)
df
# order by salary descending
df <- select(teachers,'last_name','first_name','salary') %>% arrange(desc(salary))
df
# ordering by two things
df <- select(teachers,'last_name','school','hire_date') %>% arrange(school,desc(hire_date))
df
View(df)
View(teachers)
df
# filter rows
df <- select(teachers,'last_name','school','hire_date') %>% filter(school == "Myers Middle School")
df
# this is does not equal
df <- select(teachers,'school') %>% filter(school != "F.D. Roosevelt HS")
df
# hire date is before
df <- select(teachers,'last_name','school','hire_date') %>% filter(hire_date < "2000-01-01")
df
# salary is greater than or equal to
df <- select(teachers,'last_name','first_name','salary') %>% filter(salary >= 43500)
df
# salary is between
df <- select(teachers,'last_name','first_name','salary') %>% filter( (salary > 40000) & (salary < 65000) )
df
# returns just Sam, uppercase
df <- select(teachers,'first_name','last_name') %>% filter( str_detect(first_name, 'Sam' ) )
df
# would return Sam or sam
df <- select(teachers,'first_name','last_name') %>% filter( str_detect(first_name, regex('sam', ignore_case=TRUE) ) )
df
# regex, or regular expression, is an adventure
# this will return all schools with velt in them
df <- select(teachers,'first_name','last_name','school') %>% filter( str_detect(school, regex('velt', ignore_case=TRUE) ) )
df
# mixing selectors
# And is &, or is |
df <- select(teachers,'last_name','first_name','salary') %>% filter( (last_name == "Cole") | (last_name == "Bush") )
df
# school is Roosevelt, salary is < 38999 or > 40000
df <- select(teachers,'last_name','first_name','school','salary') %>% filter( school == "F.D. Roosevelt HS" & (salary < 38000 | salary > 40000)  )
df
# select first, last school hire salary, school roo sort desc salary
df <- select(teachers,'last_name','first_name','school','hire_date','salary') %>% filter( str_detect(school, regex('roo.', ignore_case=TRUE) ) ) %>% arrange(desc(hire_date))
df
